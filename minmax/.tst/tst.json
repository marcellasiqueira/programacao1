{
  "files": {
    "public_tests.py": {
      "category": "public",
      "data": "import unittest\nimport sys\n\nundertest = __import__(sys.argv[-1].split(\".py\")[0])\nminmax_sort = getattr(undertest, 'minmax_sort', None)\n\nclass PublicTests(unittest.TestCase):\n\n   def test_exemplo(self):\n     assert  minmax_sort([7, 4, 8, 1, 2, 3]) == [[1, 4, 3, 7, 2, 8], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 7, 8]]\n\nif __name__ == '__main__':\n    loader = unittest.TestLoader()\n    runner = unittest.TextTestRunner()\n    runner.run(loader.loadTestsFromModule(sys.modules[__name__]))\n"
    },
    "minmax.py": {
      "category": "answer",
      "data": "# coding: utf-8\n# MinMax Sort = Selection Sort Duplicado\n# 2017, Marcella Siqueira / UFCG, Programa\u00e7\u00e3o 1\n# Matr\u00edcula: 117110492\n\ndef minmax_sort(lista):\n    lista_final = []\n    maior, menor, m = 0, 0, len(lista)\n    for i in range(0, int(m/2)):\n        for j in range(i, m):\n            if lista[j] < lista[menor]:\n                menor = j\n\n        lista[menor], lista[i] = lista[i], lista[menor]\n\n        for k in range(i, m):\n            if lista[k] > lista[maior]:\n                maior = k\n\n        lista[maior], lista[m - 1] = lista[m - 1], lista[maior]\n\n        m -= 1\n        \n        lista_copia = []\n        for i in range(len(lista)):\n            lista_copia.append(lista[i])\n\n        lista_final.append(lista_copia)\n\n    return lista_final\n\nassert minmax_sort([7, 4, 8, 1, 2, 3]) == [[1, 4, 3, 7, 2, 8],\n                                           [1, 2, 3, 4, 7, 8],\n                                           [1, 2, 3, 4, 7, 8]]",
      "name": "minmax.py"
    }
  },
  "kind": "assignment",
  "name": null,
  "checksum": "e00049a4df4ae1472d9fdba064dae7de",
  "iid": 5846231083384832,
  "activity_revision": "1.0.0"
}